
%Example
%-------
d = labchart.getActiveDocument();


%persistent sound_y sound_Fs;

%if isempty(sound_y) || isempty(sound_Fs)
    % Fs = 44100; % Sampling frequency
    % t = 0:1/Fs:1; % Time vector for 1 second
    % f = 440; % Frequency of the sine wave (A4 note)
    % sound_y = sin(2 * pi * f * t); % Generate the sine wave
    % sound_Fs = Fs;
load gong.mat y Fs;
sound_y = y;
sound_Fs = Fs;
%end


%persistent heartbeat_y heartbeat_Fs;
heartbeat_Fs = 44100; % Sampling frequency
t = 0:1/heartbeat_Fs:0.5; % Time vector for 0.5 seconds

% Parameters for the thud
f = 200;%60; % Low frequency for the thud (Hz)
thud = sin(2 * pi * f * t); % Low-frequency sine wave

% Apply a Gaussian envelope for attack and decay
envelope = exp(-10 * t); % Exponential decay
heartbeat_y = thud .* envelope; % Modulate the sine wave with the envelope

% Normalize the signal to avoid clipping
heartbeat_y = heartbeat_y / max(abs(heartbeat_y));

dq        = parallel.pool.DataQueue;       % your queue
delay_s   = 0.20;                          % 200 ms  ⇒ 0.20 s
%[wave,fs] = audioread('ding.wav');         % whatever sound you want

% Register callback – extra arguments are captured by the anonymous function
%afterEach(dq, @(chunk) syncPeakNaive(chunk, delay_s,  heartbeat_y, heartbeat_Fs));

cb = buildPeakCallback(0.20,heartbeat_y, heartbeat_Fs);
afterEach(dq, cb);


%Setup plotting
%------------------
clf %We'll setup for 3 channels ...
h1 = subplot(2,1,1);
%h2 = subplot(2,1,2);
%h3 = subplot(3,1,3);

%Initialize Streams
%------------------
fs = 1000; %frequency of sampling (sampling rate)
fs2 = 20000;
n_seconds_valid = 10;
s1 = labchart.streaming.ui_streamed_data2(fs,n_seconds_valid,'Channel 3','h_axes',h1,'plot_options',{'Color','r'},'axis_width_seconds',5);

s1.callback = @(obj,~) ...
    labchart.streaming.callback_examples.pushToQueue(obj, dq);
%s1.callback = @labchart.streaming.callback_examples.nValidSamples;
%Alternatively
%s1.callback = @labchart.streaming.callback_examples.averageSamplesAddComment;

%Store whatever you want here. You can use this in the callback by
%accessing this property from the first input argument.
s1.user_data = 'hello!';

%Use this if you only want one channel
s1.register(d)


%To stop the events
%-------------------
%d.stopEvents()




% ONLY FOR DEVELOPMENT PURPOSES!
Screen('Preference', 'SkipSyncTests', 1);

InitializePsychSound

try
    % Choosing the display with the highest dislay number is
    % a best guess about where you want the stimulus displayed.
    screens=Screen('Screens');
    screenNumber=max(screens);

    [width, height]=Screen('DisplaySize', screenNumber);
    
    window=Screen('OpenWindow', screenNumber,0,[],32,2);
    Screen('FillRect', window, [0, 0, 0]);
    Screen('TextFont',window, 'Courier New');
    Screen('TextStyle', window, 1);

    %ui_directories(window);
    %sca;
    Screen('Flip', window);
    %demo_session(window);
    demo_session(window, dq, cb);



    white_col = [255,255,255];
    Screen('Flip', window);
    DrawFormattedText(window, 'Press [E] to exit', 'right', [], white_col);
    DrawFormattedText(window, 'We are now going to start the test', 'center', 'center', white_col);
    Screen('Flip', window);
    KbStrokeWait;   % wait for any key


    num_tests = 4;
%     for i = 1:num_tests
%         session(window);
%     end
    session(window);
    sca;
    delete(timerfind);     % stops the one-shot timers cleanly

catch
    %this "catch" section executes in case of an error in the "try" section
    %above.  Importantly, it closes the onscreen window if its open.
    sca;

    psychrethrow(psychlasterror);
end % try..catch



% ---------- buildPeakCallback.m ----------
function cb = buildPeakCallback(delay_s, wave, fs, window)
% buildPeakCallback  Create an afterEach-compatible peak detector.
%
%   cb = buildPeakCallback(0.20, wave, fs, windowHandle);

    narginchk(3,4);
    if nargin < 4, window = []; end            % window is optional

    % -- keep one audioplayer alive for the whole session --------------
    persistent player
    if isempty(player) || ~isvalid(player)
        player = audioplayer(wave,fs);
        player.StopFcn = @(~,~) set(player,'CurrentSample',1);
    end

    % -- state carried inside the closure ------------------------------
    peakPending = false;
    tDelay      = timer('ExecutionMode','singleShot', ...
                        'StartDelay',delay_s, ...
                        'TimerFcn',@(~,~) playAndFlash());

    cb = @callback;   % <- this handle is returned to the caller
    % ==========================================================
    function callback(new_data)
        if any(new_data > 800) && ~peakPending
            peakPending = true;
            fprintf('PEAK detected @ %.3f s\n',now*86400);
            start(tDelay);
        elseif all(new_data <= 800)
            peakPending = false;
        end
    end

    function playAndPrint()
        sound(wave,fs);
        fprintf('Signal (%.0f ms later)\n', delay_s*1000);
        peakPending = false;
    end

    function playAndFlash()
        %if isplaying(player), stop(player); end
        %play(player);

        sound(wave,fs);
        fprintf('Signal (%.0f ms later)\n', delay_s*1000);
        peakPending = false;

        % --- optional PsychToolbox flash -----------------------------
        if ~isempty(window) && Screen('WindowKind',window)
            DrawFormattedText(window, 'PEAK','center','center',[255 0 0]);
            Screen('Flip',window);
        end

        fprintf('Signal (%.0f ms later)\n',delay_s*1000);
        peakPending = false;
    end
end

